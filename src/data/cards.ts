// Kart tipleri
export type CardType = 'shape' | 'action';

export interface Card {
  id: number;
  type: CardType;
  name: string;
  description?: string;
  icon?: string;
  shape?: number[][]; // ≈ûekil kartlarƒ± i√ßin 2D grid (1 = dolu, 0 = bo≈ü)
  count?: number; // Her karttan ka√ß tane var
}

export interface CardDeck {
  cards: Card[];
  remaining: number;
}

// 9 farklƒ± ≈üekil kartƒ± (Tetris benzeri bloklar)
// Her karttan 3'er tane
const shapeCards: Card[] = [
  {
    id: 1,
    type: 'shape',
    name: 'I Bloƒüu',
    shape: [[1, 1, 1, 1]],
    icon: 'üü¶',
    count: 3,
  },
  {
    id: 2,
    type: 'shape',
    name: 'O Bloƒüu',
    shape: [
      [1, 1],
      [1, 1],
    ],
    icon: 'üü®',
    count: 3,
  },
  {
    id: 3,
    type: 'shape',
    name: 'T Bloƒüu',
    shape: [
      [0, 1, 0],
      [1, 1, 1],
    ],
    icon: 'üü™',
    count: 3,
  },
  {
    id: 4,
    type: 'shape',
    name: 'L Bloƒüu',
    shape: [
      [1, 0],
      [1, 0],
      [1, 1],
    ],
    icon: 'üüß',
    count: 3,
  },
  {
    id: 5,
    type: 'shape',
    name: 'J Bloƒüu',
    shape: [
      [0, 1],
      [0, 1],
      [1, 1],
    ],
    icon: 'üü¶',
    count: 3,
  },
  {
    id: 6,
    type: 'shape',
    name: 'S Bloƒüu',
    shape: [
      [0, 1, 1],
      [1, 1, 0],
    ],
    icon: 'üü©',
    count: 3,
  },
  {
    id: 7,
    type: 'shape',
    name: 'Z Bloƒüu',
    shape: [
      [1, 1, 0],
      [0, 1, 1],
    ],
    icon: 'üü•',
    count: 3,
  },
  {
    id: 8,
    type: 'shape',
    name: 'K√º√ß√ºk L',
    shape: [
      [1, 0],
      [1, 1],
    ],
    icon: 'üü´',
    count: 3,
  },
  {
    id: 9,
    type: 'shape',
    name: 'Plus Bloƒüu',
    shape: [
      [0, 1, 0],
      [1, 1, 1],
      [0, 1, 0],
    ],
    icon: 'üü™',
    count: 3,
  },
];

// Hareket kartlarƒ± (her birinden 2'≈üer tane)
const actionCards: Card[] = [
  {
    id: 101,
    type: 'action',
    name: 'Ayaƒüa Kalk',
    description: 'Ayaƒüa kalk ve platformunu tut!',
    icon: 'üßç',
    count: 2,
  },
  {
    id: 102,
    type: 'action',
    name: 'Tek Ayak',
    description: 'Tek ayak √ºst√ºnde dur!',
    icon: 'ü¶µ',
    count: 2,
  },
  {
    id: 103,
    type: 'action',
    name: 'El Deƒüi≈ütir',
    description: 'Platformunu diƒüer eline ge√ßir!',
    icon: 'ü§ù',
    count: 2,
  },
  {
    id: 104,
    type: 'action',
    name: 'G√∂zleri Kapat',
    description: '5 saniye g√∂zlerini kapat!',
    icon: 'üôà',
    count: 2,
  },
  {
    id: 105,
    type: 'action',
    name: 'D√∂nd√ºr',
    description: 'Platformunu 180¬∞ d√∂nd√ºr!',
    icon: 'üîÑ',
    count: 2,
  },
  {
    id: 106,
    type: 'action',
    name: 'Zƒ±pla',
    description: 'Yerinde 3 kere zƒ±pla!',
    icon: '‚¨ÜÔ∏è',
    count: 2,
  },
  {
    id: 107,
    type: 'action',
    name: 'Sessizlik',
    description: 'Bir sonraki tura kadar konu≈üma!',
    icon: 'ü§´',
    count: 2,
  },
  {
    id: 108,
    type: 'action',
    name: 'Dans Et',
    description: '5 saniye dans et!',
    icon: 'üíÉ',
    count: 2,
  },
];

// Deste olu≈üturma - her karttan belirtilen sayƒ±da ekle
function createDeck(): Card[] {
  const deck: Card[] = [];
  [...shapeCards, ...actionCards].forEach((card) => {
    const count = card.count || 1;
    for (let i = 0; i < count; i++) {
      deck.push({ ...card });
    }
  });
  return deck;
}

// Desteyi karƒ±≈ütƒ±rma
function shuffleDeck(deck: Card[]): Card[] {
  const shuffled = [...deck];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// Yeni deste olu≈ütur
export function initializeDeck(): CardDeck {
  const cards = shuffleDeck(createDeck());
  return {
    cards,
    remaining: cards.length,
  };
}

// Desteden kart √ßek
export function drawCard(deck: CardDeck): { card: Card | null; newDeck: CardDeck } {
  if (deck.remaining === 0) {
    return { card: null, newDeck: deck };
  }

  const card = deck.cards[deck.cards.length - deck.remaining];
  return {
    card,
    newDeck: {
      cards: deck.cards,
      remaining: deck.remaining - 1,
    },
  };
}
